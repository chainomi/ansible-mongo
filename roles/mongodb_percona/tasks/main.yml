- name: Install dependencies
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes

- name: Get node type from EC2 tags
  shell: |
          aws ec2 describe-tags \
          --region "$(ec2-metadata -z | cut -d' ' -f2 | sed 's/.$//')" \
          --filters "Name=resource-id,Values=$(ec2-metadata --instance-id | cut -d " " -f 2)" \
          --query 'Tags[?Key==`node_type`].Value' \
          --output text       
  register: node_type 

# - name: Update hosts file
#   template:
#     src: templates/hosts.j2
#     dest: "/etc/hosts"
#     owner: root
#     group: root

- name: install repo
  ansible.builtin.apt:
    deb: "https://repo.percona.com/apt/percona-release_latest.{{ ansible_distribution_release }}_all.deb"
  retries: 5
  register: install_repo
  until: install_repo is success   

- name: enable repo
  shell: percona-release enable psmdb-70 release

- name: Update apt packages
  ansible.builtin.apt:
    update_cache: yes 

- name: Install Percona Server for MongoDB
  ansible.builtin.apt:
    name: 
     - percona-server-mongodb={{ mongodb_version }}
     - percona-server-mongodb-mongos={{ mongodb_version }}
     - percona-server-mongodb-shell={{ mongodb_version }}
     - percona-server-mongodb-server={{ mongodb_version }}
     - percona-server-mongodb-tools={{ mongodb_version }}    
    state: present
  retries: 5
  register: install_percona
  until: install_percona is success

- name: Update mongodb configuration
  ansible.builtin.template:
    src: templates/{{ mongodb_service_name }}.conf.j2
    dest: "/etc/{{ mongodb_service_name }}.conf"
    owner: root
    group: root
  # notify: restart mongodb

- name: Start and enable mongodb service
  ansible.builtin.service: 
    name: "{{ mongodb_service_name }}"
    enabled: yes
    state: started    

- name: restart mongodb
  ansible.builtin.service:
    name: "{{ mongodb_service_name }}"
    state: restarted

- name: Pause for 15 seconds to finish server restart
  ansible.builtin.pause:
    seconds: 15

- name: Check for db authentication
  shell: |
          if mongo --eval "db.getUsers()" localhost:{{ mongodb_port }} | grep "requires authentication"; 
          then 
            echo "authentication enabled"
            exit 1
          else
            echo "authentication is not enabled"
            exit 0
          fi    
  register: auth_check
  ignore_errors: true

# - name: force primary to step down
#   shell: |
#           mongo --eval 'rs.freeze(120)'
#           mongo --eval 'rs.stepDown(120)'
#   when: 
#     - node_type.stdout == "replica"

# - name: Initiate replica set
#   shell: |
#           mongo --eval \
#           'rs.initiate({_id: "{{ mongodb_replicaset_name }}",
#            members:[{_id: 0, host: "{{ mondogodb_master }}:{{ mongodb_port }}", priority: 3},
#                     {_id: 1, host: "{{ mondogodb_replica_1 }}:{{ mongodb_port }}", priority: 2},
#                     {_id: 2, host:"{{ mondogodb_replica_2 }}:{{ mongodb_port }}", priority: 1}]})' localhost:{{ mongodb_port }}   
#   when: 
#     - node_type.stdout == "master"
#     - mongodb_replicaset_name | length > 0
#   register: replica_init 

# - name: Pause for 15 seconds to finish replica initialization
#   ansible.builtin.pause:
#     seconds: 15

# - name: Print replica initialization output
#   debug: msg="{{ replica_init.stdout | to_nice_json }}"
#   when: 
#     - node_type.stdout == "master"
#     - mongodb_replicaset_name | length > 0    

- name: Ensure replicaset exists
  community.mongodb.mongodb_replicaset:
    login_host: localhost
    login_port: "{{ mongodb_port }}"    
    # login_user: "{{ mongodb_admin_username }}"
    # login_password: "{{ mongodb_admin_password }}"
    replica_set: "{{ mongodb_replicaset_name }}"
    members:
    - host: "{{ mondogodb_master }}:{{ mongodb_port }}"
      priority: 3
    - host: "{{ mondogodb_replica_1 }}:{{ mongodb_port }}"
      priority: 2
    - host: "{{ mondogodb_replica_2 }}:{{ mongodb_port }}"
      priority: 1
  when: node_type.stdout == "master"
  register: replica_init     

- name: Wait for the replicaset to stabilise
  community.mongodb.mongodb_status:
    replica_set: "{{ mongodb_replicaset_name }}"
    poll: 5
    interval: 10
  when: 
    - node_type.stdout == "master"

# - name: Print replica initialization output
#   debug: msg="{{ replica_init.stdout | to_nice_json }}"
#   when: 
#     - node_type.stdout == "master"
#     - mongodb_replicaset_name | length > 0 

- name: Pause for 15 seconds to finish replica initialization
  ansible.builtin.pause:
    seconds: 15

- name: Check replica set status
  shell: mongo --eval 'rs.status()' localhost:{{ mongodb_port }} 
  when: 
    - mongodb_replicaset_name | length > 0
  register: replica_status    

- name: Print replica status from nodes
  debug: msg="{{ replica_status.stdout | to_json }}"
  when: 
    - mongodb_replicaset_name | length > 0

- name: Add Mongo admin user role and credential (no auth)
  community.mongodb.mongodb_user:
    login_host: localhost
    login_port: "{{ mongodb_port }}"
    database: "{{ mongodb_admin_db }}"
    name: "{{ mongodb_admin_username }}"
    password: "{{ mongodb_admin_password }}"
    roles: "{{ mongodb_admin_roles }}"
    state: present
  when: 
    # - auth_check is succeeded 
    - node_type.stdout == "master" or mongodb_replicaset_name | length == 0

- name: Add / Update Mongo admin user role and credentials (with auth)
  community.mongodb.mongodb_user:
    login_host: localhost
    login_port: "{{ mongodb_port }}"
    login_user: "{{ mongodb_admin_username }}"
    login_password: "{{ mongodb_admin_password }}"
    database: "{{ mongodb_admin_db }}"
    name: "{{ mongodb_admin_username }}"
    password: "{{ mongodb_admin_password }}"
    roles: "{{ mongodb_admin_roles }}"
    state: present
  when: 
    - node_type.stdout == "master" or mongodb_replicaset_name | length == 0


# - name: Add / Update Mongo service user role and credentials
#   community.mongodb.mongodb_user:
#     login_host: localhost
#     login_port: "{{ mongodb_port }}"
#     login_user: "{{ mongodb_admin_username }}"
#     login_password: "{{ mongodb_admin_password }}"
#     database: "{{ community.mongodb.mongodb_user_db }}"
#     name: "{{ community.mongodb.mongodb_username }}"
#     password: "{{ community.mongodb.mongodb_user_password }}"
#     roles: "{{ community.mongodb.mongodb_user_roles }}"
#     state: present
#   when: 
#     - node_type.stdout == "master" or mongodb_replicaset_name == ""

# - name: Initiate replica set
#   shell: |
#           mongo --eval \
#           'rs.initiate()' localhost:{{ mongodb_port }}   
#   when: 
#     - node_type.stdout == "master"
#   register: replica_init  

# - name: Ensure replicaset exists
#   community.mongodb.mongodb_replicaset:
#     login_host: localhost
#     login_port: "{{ mongodb_port }}"    
#     login_user: "{{ mongodb_admin_username }}"
#     login_password: "{{ mongodb_admin_password }}"
#     replica_set: "{{ mongodb_replicaset_name }}"
#     members:
#     - mongo-db1:{{ mongodb_port }}"
#     - mongo-db2:{{ mongodb_port }}"
#     - mongo-db3:{{ mongodb_port }}"
#   when: node_type.stdout == "master"
  # when: groups.mongod.index(inventory_hostname) == 0


# - name: Initiate replica set
#   shell: |
#           mongo --eval \
#           'rs.initiate({_id: "my-mongodb-rs", 
#                 members:[{_id: 0,host: "{{ mondogodb_master }}:{{ mongodb_port }}"},
#                 {_id:1,host:"{{ mondogodb_replica_1 }}:{{ mongodb_port }}"},
#                 {_id:2,host:"{{ mondogodb_replica_2 }}:{{ mongodb_port }}" }
#                 ]})' localhost:{{ mongodb_port }}   
#   when: 
#     - node_type.stdout == "master"
#   register: replica_init  



# - name: Update mongodb configuration
#   template:
#     src: templates/mongod.conf.j2
#     dest: "/etc/{{ mongodb_service_name }}.conf"
#     owner: root
#     group: root
#   notify: restart mongodb
